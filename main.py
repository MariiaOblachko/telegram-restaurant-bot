import os
import json
from google.oauth2 import service_account
import telebot
import gspread
import schedule
import time
import threading
from datetime import datetime, timedelta
from telebot import types
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –æ—Ç–∫–ª—é—á–∞–µ–º GUI backend, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
from io import BytesIO

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("BOT_TOKEN", "–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Å–≤–æ–π_—Ç–æ–∫–µ–Ω_–µ—Å–ª–∏_–Ω—É–∂–Ω–æ")
bot = telebot.TeleBot(TOKEN)

# === –î–æ—Å—Ç—É–ø –∫ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_KEY ===
google_key = os.getenv("GOOGLE_KEY")
if not google_key:
    raise Exception("GOOGLE_KEY –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

keyfile_dict = json.loads(google_key)
scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']
creds = service_account.Credentials.from_service_account_info(keyfile_dict, scopes=scope)
client = gspread.authorize(creds)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def start_auth(message):
    tg_id = str(message.from_user.id)
    sheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    all_data = sheet.get_all_records()
    for row in all_data:
        if str(row['–¢–µ–ª–µ–≥—Ä–∞–º ID']).strip() == tg_id:
            name = row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"),
                       types.KeyboardButton("üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
            bot.send_message(message.chat.id, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!", reply_markup=markup)
            return
    bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –°–æ–æ–±—â–∏—Ç–µ —Å–≤–æ–π Telegram ID —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É.")

# === /getid –∫–æ–º–∞–Ω–¥–∞ ===
@bot.message_handler(commands=['getid'])
def send_user_id(message):
    bot.reply_to(message, f"–í–∞—à Telegram ID: {message.from_user.id}\n–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")

# === –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ ===
@bot.message_handler(commands=['menu'])
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"),
               types.KeyboardButton("üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=markup)

# === –ú–æ–∏ —Å–º–µ–Ω—ã ===
@bot.message_handler(func=lambda msg: msg.text == "üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")
def show_week_schedule(message):
    tg_id = str(message.from_user.id)
    staff_sheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    staff_data = staff_sheet.get_all_records()
    name = next((row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'] for row in staff_data if str(row['–¢–µ–ª–µ–≥—Ä–∞–º ID']).strip() == tg_id), None)
    if not name:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    schedule_sheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").worksheet("–ì—Ä–∞—Ñ–∏–∫")
    schedule_data = pd.DataFrame(schedule_sheet.get_all_records())
    today = datetime.now()
    week_dates = [(today + timedelta(days=i)).strftime('%d.%m') for i in range(7)]
    shifts = schedule_data[schedule_data['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'] == name]
    shifts = shifts[shifts['–î–∞—Ç–∞'].astype(str).str[:5].isin(week_dates)]

    if shifts.empty:
        bot.send_message(message.chat.id, "üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç —Å–º–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.")
    else:
        text = "üìÖ –¢–≤–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for _, row in shifts.iterrows():
            text += f"üìÜ {row['–î–∞—Ç–∞']} ‚Äî {row['–ó–∞–≤–µ–¥–µ–Ω–∏–µ']}, {row['–î–æ–ª–∂–Ω–æ—Å—Ç—å']} ({row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']})\n"
        bot.send_message(message.chat.id, text)

# === –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ===
@bot.message_handler(func=lambda message: message.text == "üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def full_schedule_image(message):
    try:
        schedule_sheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").worksheet("–ì—Ä–∞—Ñ–∏–∫")
        schedule_data = schedule_sheet.get_all_records()
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    today = datetime.now()
    end_date = today + timedelta(days=30)
    filtered = []

    for row in schedule_data:
        try:
            row_date_str = str(row['–î–∞—Ç–∞']).strip()
            if row_date_str.isdigit() and len(row_date_str) <= 2:
                row_date_str = f"{row_date_str.zfill(2)}.{today.month:02d}"
            date_obj = datetime.strptime(row_date_str, '%d.%m').replace(year=today.year)
            if today.date() <= date_obj.date() <= end_date.date():
                filtered.append({
                    '–î–∞—Ç–∞': row['–î–∞—Ç–∞'],
                    '–ò–º—è': row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
                    '–ó–∞–≤–µ–¥–µ–Ω–∏–µ': row.get('–ó–∞–≤–µ–¥–µ–Ω–∏–µ', ''),
                    '–î–æ–ª–∂–Ω–æ—Å—Ç—å': row.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', ''),
                    '–í—Ä–µ–º—è': row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']
                })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
            continue

    if not filtered:
        bot.send_message(message.chat.id, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
        return

    df = pd.DataFrame(filtered)
    fig, ax = plt.subplots(figsize=(12, 0.6 * len(df)))
    ax.axis('off')
    table = ax.table(cellText=df.values, colLabels=df.columns, loc='center', cellLoc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1, 1.5)
    for i, row in df.iterrows():
        color = '#FFE4B5' if '–ë–∞–∫–∏—Ä' in row['–ó–∞–≤–µ–¥–µ–Ω–∏–µ'] else '#FFC0CB' if '–ü–∏—Ü—Ü–∞' in row['–ó–∞–≤–µ–¥–µ–Ω–∏–µ'] else None
        if color:
            table[(i + 1, 2)].set_facecolor(color)
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    try:
        bot.send_photo(message.chat.id, buf, caption="üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
    plt.close()

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–º–µ–Ω–∞—Ö ===
def send_reminders():
    print("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞.")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m')
    spreadsheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    schedule_data = spreadsheet.worksheet("–ì—Ä–∞—Ñ–∏–∫").get_all_records()
    staff_data = spreadsheet.worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏").get_all_records()

    for row in schedule_data:
        if str(row['–î–∞—Ç–∞']).strip() == tomorrow:
            name = row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].strip()
            for staff in staff_data:
                if staff['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].strip() == name:
                    tg_id = staff['–¢–µ–ª–µ–≥—Ä–∞–º ID']
                    try:
                        bot.send_message(int(tg_id),
                                         f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ —Å–º–µ–Ω–∞!\n"
                                         f"üè¢ –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {row.get('–ó–∞–≤–µ–¥–µ–Ω–∏–µ', '‚Äî')}\n"
                                         f"üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {row.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '‚Äî')}\n"
                                         f"üïò –í—Ä–µ–º—è: {row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']}")
                    except Exception as e:
                        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {name}: {e}")
                    break

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
schedule.every().day.at("10:00").do(send_reminders)
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)
threading.Thread(target=run_scheduler).start()

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.polling()
