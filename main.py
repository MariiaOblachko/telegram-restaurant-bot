import telebot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import schedule
import time
import threading
from datetime import datetime, timedelta
from telebot import types
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –æ—Ç–∫–ª—é—á–∞–µ–º GUI backend, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

from io import BytesIO

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '7575822751:AAFH-T5Ik-A5rjIqeWYPH4vspETCSfJyEpA'
bot = telebot.TeleBot(TOKEN)
KEY_PATH = 'bot-key.json'

# === –î–æ—Å—Ç—É–ø –∫ Google Sheets ===
scope = [
    'https://spreadsheets.google.com/feeds',
    'https://www.googleapis.com/auth/drive'
]
creds = ServiceAccountCredentials.from_json_keyfile_name(KEY_PATH, scope)
client = gspread.authorize(creds)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
from telebot import types


@bot.message_handler(commands=['start'])
def start_auth(message):
    tg_id = str(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    sheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    all_data = sheet.get_all_records()

    for row in all_data:
        if str(row['–¢–µ–ª–µ–≥—Ä–∞–º ID']).strip() == tg_id:
            name = row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']

            # ‚å®Ô∏è –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")
            btn2 = types.KeyboardButton("üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            markup.add(btn1, btn2)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot.send_message(message.chat.id,
                             f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!",
                             reply_markup=markup)
            return

    bot.send_message(
        message.chat.id,
        "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –°–æ–æ–±—â–∏—Ç–µ —Å–≤–æ–π Telegram ID —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É.")


# === –ö–æ–º–∞–Ω–¥–∞ /getid ===
@bot.message_handler(commands=['getid'])
def send_user_id(message):
    user_id = message.from_user.id
    bot.reply_to(
        message,
        f"–í–∞—à Telegram ID: {user_id}\n–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É."
    )


# === –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ ===
@bot.message_handler(commands=['menu'])
def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("\ud83d\udcc5 –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")
    btn2 = types.KeyboardButton("\ud83d\udccb –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id,
                     "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
                     reply_markup=markup)


# === –ú–æ–∏ —Å–º–µ–Ω—ã ===
@bot.message_handler(
    func=lambda message: message.text == "\ud83d\udcc5 –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")
def my_schedule(message):
    tg_id = str(message.from_user.id)
    staff_sheet = client.worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    schedule_sheet = client.worksheet("–ì—Ä–∞—Ñ–∏–∫")
    staff_data = staff_sheet.get_all_records()
    name = None
    for row in staff_data:
        if str(row['–¢–µ–ª–µ–≥—Ä–∞–º ID']).strip() == tg_id:
            name = row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].strip()
            break

    if not name:
        bot.send_message(message.chat.id,
                         "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    today = datetime.now()
    end_date = today + timedelta(days=7)
    schedule_data = schedule_sheet.get_all_records()
    msg = f"\ud83d\udcc5 –¢–≤–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ {today.strftime('%d.%m')}‚Äì{end_date.strftime('%d.%m')}:\n\n"
    found = False

    for row in schedule_data:
        try:
            date_obj = datetime.strptime(row['–î–∞—Ç–∞'], '%d.%m.%Y')
        except:
            continue
        if name == row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].strip(
        ) and today <= date_obj <= end_date:
            found = True
            msg += (
                f"\ud83d\udcc6 {row['–î–∞—Ç–∞']} | \ud83d\udd58 {row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']} | "
                f"\ud83c\udfe2 {row.get('–ó–∞–≤–µ–¥–µ–Ω–∏–µ', '‚Äî')} | \ud83d\udcbc {row.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '‚Äî')}\n"
            )

    if not found:
        msg = "‚úÖ –£ —Ç–µ–±—è –Ω–µ—Ç —Å–º–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π."

    bot.send_message(message.chat.id, msg)


# === –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∫–∞—Ä—Ç–∏–Ω–∫–∞) ===
@bot.message_handler(func=lambda message: message.text == "üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def full_schedule_image(message):
    try:
        schedule_sheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").worksheet("–ì—Ä–∞—Ñ–∏–∫")
        schedule_data = schedule_sheet.get_all_records()
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    today = datetime.now()
    end_date = today + timedelta(days=30)
    filtered = []

    for row in schedule_data:
        try:
            row_date = row['–î–∞—Ç–∞']
            row_date_str = str(row_date).strip()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "20" (—á–∏—Å–ª–æ)
            if row_date_str.isdigit() and len(row_date_str) <= 2:
                row_date_str = f"{row_date_str.zfill(2)}.{today.month:02d}"

            try:
                date_obj = datetime.strptime(row_date_str, '%d.%m')
                date_obj = date_obj.replace(year=today.year)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã '{row_date_str}': {e}")
                continue

            date_obj = date_obj.replace(year=today.year)

            if today.date() <= date_obj.date() <= end_date.date():
                filtered.append({
                    '–î–∞—Ç–∞': row['–î–∞—Ç–∞'],
                    '–ò–º—è': row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
                    '–ó–∞–≤–µ–¥–µ–Ω–∏–µ': row.get('–ó–∞–≤–µ–¥–µ–Ω–∏–µ', ''),
                    '–î–æ–ª–∂–Ω–æ—Å—Ç—å': row.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', ''),
                    '–í—Ä–µ–º—è': row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']
                })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
            continue

    if not filtered:
        bot.send_message(message.chat.id, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
        return

    df = pd.DataFrame(filtered)
    fig, ax = plt.subplots(figsize=(12, 0.6 * len(df)))
    ax.axis('off')
    table = ax.table(cellText=df.values,
                     colLabels=df.columns,
                     loc='center',
                     cellLoc='center')

    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1, 1.5)

    # –ó–∞–ª–∏–≤–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü—É "–ó–∞–≤–µ–¥–µ–Ω–∏–µ"
    for i, row in df.iterrows():
        place = str(row['–ó–∞–≤–µ–¥–µ–Ω–∏–µ']).strip()
        color = None
        if '–ë–∞–∫–∏—Ä' in place:
            color = '#FFE4B5'  # —Å–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        elif '–ü–∏—Ü—Ü–∞' in place:
            color = '#FFC0CB'  # —Ä–æ–∑–æ–≤—ã–π

        if color:
            table[(i + 1, 2)].set_facecolor(color)  # –∫–æ–ª–æ–Ω–∫–∞ "–ó–∞–≤–µ–¥–µ–Ω–∏–µ" ‚Äî –∏–Ω–¥–µ–∫—Å 2

    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)

    try:
        bot.send_photo(message.chat.id, buf, caption="üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    plt.close()





# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–∞—Ö ===
# üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_reminders():
    print("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞.")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m')

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    spreadsheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ª–∏—Å—Ç–∞–º
    schedule_sheet = spreadsheet.worksheet("–ì—Ä–∞—Ñ–∏–∫")
    schedule_data = schedule_sheet.get_all_records()

    staff_sheet = spreadsheet.worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    staff_data = staff_sheet.get_all_records()

    for row in schedule_data:
        if str(row['–î–∞—Ç–∞']).strip() == tomorrow:
            name = row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].strip()
            shift_time = row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']

            for staff in staff_data:
                if staff['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].strip() == name:
                    tg_id = staff['–¢–µ–ª–µ–≥—Ä–∞–º ID']
                    try:
                        bot.send_message(
                            int(tg_id),
                            f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ —Å–º–µ–Ω–∞!\n"
                            f"üè¢ –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {row.get('–ó–∞–≤–µ–¥–µ–Ω–∏–µ', '‚Äî')}\n"
                            f"üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {row.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '‚Äî')}\n"
                            f"üïò –í—Ä–µ–º—è: {shift_time}")
                    except Exception as e:
                        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {name}: {e}")
                    break


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
schedule.every().day.at("10:00").do(send_reminders)  # –¥–ª—è —Ç–µ—Å—Ç–∞


def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)


threading.Thread(target=run_scheduler).start()
from datetime import datetime, timedelta
import pandas as pd


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"
@bot.message_handler(func=lambda msg: msg.text == "üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")
def show_week_schedule(message):
    tg_id = str(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID
    staff_sheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    staff_data = staff_sheet.get_all_records()

    name = None
    for staff in staff_data:
        if str(staff['–¢–µ–ª–µ–≥—Ä–∞–º ID']).strip() == tg_id:
            name = staff['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']
            break

    if not name:
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
    schedule_sheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤").worksheet("–ì—Ä–∞—Ñ–∏–∫")
    schedule_data = pd.DataFrame(schedule_sheet.get_all_records())

    today = datetime.now()
    week_dates = [(today + timedelta(days=i)).strftime('%d.%m')
                  for i in range(7)]
    shifts = schedule_data[schedule_data['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'] == name]
    shifts = shifts[shifts['–î–∞—Ç–∞'].astype(str).str[:5].isin(week_dates)]

    if shifts.empty:
        bot.send_message(message.chat.id,
                         "üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç —Å–º–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.")
    else:
        text = "üìÖ –¢–≤–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for _, row in shifts.iterrows():
            text += f"üìÜ {row['–î–∞—Ç–∞']} ‚Äî {row['–ó–∞–≤–µ–¥–µ–Ω–∏–µ']}, {row['–î–æ–ª–∂–Ω–æ—Å—Ç—å']} ({row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']})\n"
        bot.send_message(message.chat.id, text)


bot.polling()
