import os
import json
from google.oauth2 import service_account
import telebot
import gspread
import schedule
import time
import threading
from datetime import datetime, timedelta
from telebot import types
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # –æ—Ç–∫–ª—é—á–∞–µ–º GUI backend, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
from io import BytesIO

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7575822751:AAFH-T5Ik-A5rjIqeWYPH4vspETCSfJyEpA"
bot = telebot.TeleBot(TOKEN)

# === –î–æ—Å—Ç—É–ø –∫ Google Sheets —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_KEY ===
google_key = os.getenv("GOOGLE_KEY")
if not google_key:
    raise Exception("GOOGLE_KEY –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

keyfile_dict = json.loads(google_key)
scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']
creds = service_account.Credentials.from_service_account_info(keyfile_dict, scopes=scope)
client = gspread.authorize(creds)
# === –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
staff_data = []
schedule_data = []

# === –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü ===
def update_cache():
    global staff_data, schedule_data
    try:
        spreadsheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        staff_data = spreadsheet.worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏").get_all_records()
        schedule_data = spreadsheet.worksheet("–ì—Ä–∞—Ñ–∏–∫").get_all_records()
        print("üîÑ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ Google Sheets.")
        print("üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:", staff_data)
        print("üìã –ì—Ä–∞—Ñ–∏–∫:", schedule_data)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


# === –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ===
update_cache()

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ===
schedule.every(5).minutes.do(update_cache)

@bot.message_handler(commands=['start'])
@bot.message_handler(commands=['start'])
def start_auth(message):
    print("üß™ –í—ã–∑–≤–∞–Ω /start")
    print("üì© –í–µ—Å—å message.json:", message.json)
    tg_id = str(message.from_user.id)

    # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å start-–ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —Å—Å—ã–ª–∫–∏
    try:
        param = message.json.get('start_param')  # –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –ø—Ä–∏—Ö–æ–¥—è—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ deep-link
    except:
        param = None

    # üéØ –ï—Å–ª–∏ —ç—Ç–æ —á–µ–∫-–∏–Ω –ø–æ —Å—Å—ã–ª–∫–µ
    if param == 'checkin':
        handle_checkin(message)
        return

    # üé´ –û–±—ã—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    for row in staff_data:
        if str(row['–¢–µ–ª–µ–≥—Ä–∞–º ID']).strip() == tg_id:
            name = row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"),
                       types.KeyboardButton("üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
            bot.send_message(message.chat.id, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!", reply_markup=markup)
            return
    bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –°–æ–æ–±—â–∏—Ç–µ —Å–≤–æ–π Telegram ID —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É.")



# === /getid –∫–æ–º–∞–Ω–¥–∞ ===
@bot.message_handler(commands=['getid'])
def send_user_id(message):
    bot.reply_to(message, f"–í–∞—à Telegram ID: {message.from_user.id}\n–°–æ–æ–±—â–∏—Ç–µ –µ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")

# === üí° –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫-–∏–Ω–∞ ===
def handle_checkin(message):
    tg_id = str(message.from_user.id)
    now = datetime.now()
    today_str = now.strftime('%d.%m')
    time_str = now.strftime('%H:%M')

    # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ Telegram ID
    user = next((row for row in staff_data if str(row['–¢–µ–ª–µ–≥—Ä–∞–º ID']).strip() == tg_id), None)
    if not user:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    name = user['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']

    try:
        spreadsheet = client.open("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        sheet = spreadsheet.worksheet("–ß–µ–∫-–∏–Ω—ã")

        # –û–ø–æ–∑–¥–∞–Ω–∏–µ: –µ—Å–ª–∏ –ø–æ–∑–∂–µ 11:00
        late = now.hour > 11 or (now.hour == 11 and now.minute > 0)
        status = "‚úÖ –í–æ–≤—Ä–µ–º—è" if not late else "‚ùå –û–ø–æ–∑–¥–∞–Ω–∏–µ"

        row = [today_str, time_str, name, tg_id, status]
        sheet.append_row(row, value_input_option='USER_ENTERED')

        if late:
            last_row = len(sheet.get_all_values())
            sheet.format(f'E{last_row}', {
                "backgroundColor": {"red": 1, "green": 0.8, "blue": 0.8}
            })

        bot.send_message(message.chat.id, f"üìç –û—Ç–º–µ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {time_str}\n{name}, —Å–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–µ–∫-–∏–Ω–µ: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —á–µ–∫-–∏–Ω.")


# === –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ ===
@bot.message_handler(commands=['menu'])
def _menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"),
               types.KeyboardButton("üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=markup)

# === –ú–æ–∏ —Å–º–µ–Ω—ã ===
@bot.message_handler(func=lambda msg: msg.text == "üìÖ –ú–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")
def show_week_schedule(message):
    tg_id = str(message.from_user.id)

    # –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    name = next((row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'] for row in staff_data if str(row['–¢–µ–ª–µ–≥—Ä–∞–º ID']).strip() == tg_id), None)
    if not name:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
    today = datetime.now()
    week_dates = [(today + timedelta(days=i)).strftime('%d.%m') for i in range(7)]

    df = pd.DataFrame(schedule_data)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –∏ –¥–∞—Ç—ã
    df['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'] = df['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].astype(str).str.strip().str.lower()
    df['–î–∞—Ç–∞'] = df['–î–∞—Ç–∞'].astype(str).str.strip()
    df['–î–∞—Ç–∞'] = df['–î–∞—Ç–∞'].apply(lambda x: x.zfill(5) if '.' in x else x)def normalize_date(d):
    try:
        parts = d.strip().split(".")
        if len(parts) == 2:
            day, month = parts
            return f"{int(day):02d}.{int(month):02d}"
        else:
            return d
    except:
        return d  # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å

    df['–î–∞—Ç–∞'] = df['–î–∞—Ç–∞'].astype(str).apply(normalize_date)


    name_normalized = name.strip().lower()
    shifts = df[(df['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'] == name_normalized) & (df['–î–∞—Ç–∞'].isin(week_dates))]



    # üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã
    print("üë§ –ò–º—è –∏–∑ staff_data:", repr(name))
    print("üßæ –í—Å–µ –∏–º–µ–Ω–∞ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞:", df['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].unique())
    print("üìÜ –ù–µ–¥–µ–ª—è:", week_dates)
    print("üîé –°–æ–≤–ø–∞–≤—à–∏–µ —Å–º–µ–Ω—ã:", shifts)


    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if shifts.empty:
        bot.send_message(message.chat.id, "üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç —Å–º–µ–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.")
    else:
        text = "üìÖ –¢–≤–æ–∏ —Å–º–µ–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for _, row in shifts.iterrows():
            text += f"üìÜ {row['–î–∞—Ç–∞']} ‚Äî {row['–ó–∞–≤–µ–¥–µ–Ω–∏–µ']}, {row['–î–æ–ª–∂–Ω–æ—Å—Ç—å']} ({row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']})\n"
        bot.send_message(message.chat.id, text)


# === –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∫–∞—Ä—Ç–∏–Ω–∫–∞) ===
@bot.message_handler(func=lambda message: message.text == "üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def full_schedule_image(message):
    if not schedule_data:
        bot.send_message(message.chat.id, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    today = datetime.now()
    end_date = today + timedelta(days=30)
    filtered = []

    for row in schedule_data:
        try:
            row_date_str = str(row['–î–∞—Ç–∞']).strip()
            if row_date_str.isdigit() and len(row_date_str) <= 2:
                row_date_str = f"{row_date_str.zfill(2)}.{today.month:02d}"

            date_obj = datetime.strptime(row_date_str, '%d.%m').replace(year=today.year)
            if today.date() <= date_obj.date() <= end_date.date():
                filtered.append({
                    '–î–∞—Ç–∞': row['–î–∞—Ç–∞'],
                    '–ò–º—è': row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'],
                    '–ó–∞–≤–µ–¥–µ–Ω–∏–µ': row.get('–ó–∞–≤–µ–¥–µ–Ω–∏–µ', ''),
                    '–î–æ–ª–∂–Ω–æ—Å—Ç—å': row.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', ''),
                    '–í—Ä–µ–º—è': row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']
                })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
            continue

    if not filtered:
        bot.send_message(message.chat.id, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
        return

    df = pd.DataFrame(filtered)
    fig, ax = plt.subplots(figsize=(12, 0.6 * len(df)))
    ax.axis('off')
    table = ax.table(cellText=df.values, colLabels=df.columns, loc='center', cellLoc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1, 1.5)

    # –¶–≤–µ—Ç–æ–≤–∞—è –∑–∞–ª–∏–≤–∫–∞ "–ë–∞–∫–∏—Ä" –∏ "–ü–∏—Ü—Ü–∞"
    for i, row in df.iterrows():
        place = str(row['–ó–∞–≤–µ–¥–µ–Ω–∏–µ'])
        color = '#FFE4B5' if '–ë–∞–∫–∏—Ä' in place else '#FFC0CB' if '–ü–∏—Ü—Ü–∞' in place else None
        if color:
            table[(i + 1, 2)].set_facecolor(color)

    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)

    try:
        bot.send_photo(message.chat.id, buf, caption="üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    plt.close()


# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–º–µ–Ω–∞—Ö ===
def send_reminders():
    print("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞.")
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m')

    for row in schedule_data:
        if str(row['–î–∞—Ç–∞']).strip() == tomorrow:
            name = row['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].strip()
            for staff in staff_data:
                if staff['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'].strip() == name:
                    tg_id = staff['–¢–µ–ª–µ–≥—Ä–∞–º ID']
                    try:
                        bot.send_message(int(tg_id),
                                         f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É —Ç–µ–±—è –∑–∞–≤—Ç—Ä–∞ —Å–º–µ–Ω–∞!\n"
                                         f"üè¢ –ó–∞–≤–µ–¥–µ–Ω–∏–µ: {row.get('–ó–∞–≤–µ–¥–µ–Ω–∏–µ', '‚Äî')}\n"
                                         f"üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: {row.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '‚Äî')}\n"
                                         f"üïò –í—Ä–µ–º—è: {row['–í—Ä–µ–º—è —Å–º–µ–Ω—ã']}")
                    except Exception as e:
                        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {name}: {e}")
                    break


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
schedule.every().day.at("10:00").do(send_reminders)
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)
threading.Thread(target=run_scheduler).start()

from flask import Flask, request

app = Flask(__name__)

@app.route(f"/{TOKEN}", methods=["POST"])
def receive_update():
    print("‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –æ—Ç Telegram")
    update = telebot.types.Update.de_json(request.data.decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    bot.remove_webhook()
    webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞:", webhook_url)
    bot.set_webhook(url=webhook_url)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
